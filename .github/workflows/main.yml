name: Test, Build, and Publish

on: [push]

jobs:
  test-and-build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # The following steps are based on https://github.com/python-poetry/poetry/blob/def1ee8f3ae00c307ca028da53d2347615c5c32b/.github/workflows/main.yml#L51-L84
    - name: Get full Python version
      id: full-python-version
      run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

    - name: Bootstrap poetry
      run: |
        curl -sL https://install.python-poetry.org | python - -y

    - name: Update PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure poetry
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s pip --version || rm -rf .venv

    - name: Install dependencies
      run: poetry install

    - name: Run Ruff
      run: |
        poetry run ruff check --output-format=github .
        poetry run ruff format . --check

    - name: Type checking with mypy
      run: |
        poetry run mypy .

    - name: Release check
      run: python scripts/release_check.py streamlit_fesion/__init__.py

    # The frontend build directory is necessary to import the package
    # avoiding an error from `components.declare_component`.
    - name: Create a mock frontend build directory
      run: mkdir streamlit_fesion/frontend/dist

    - name: Test with pytest
      run: |
        poetry run pytest

    # Build
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version-file: streamlit_fesion/frontend/.nvmrc
        cache: 'yarn'
        cache-dependency-path: streamlit_fesion/frontend/yarn.lock
    - name: Install the frontend dependencies
      run: yarn install --frozen-lockfile
      working-directory: streamlit_fesion/frontend
    - name: Build the frontend
      run: yarn run build
      working-directory: streamlit_fesion/frontend

    - name: Package
      run: poetry build

    - name: Upload the built files as an artifact
      uses: actions/upload-artifact@v3
      if: ${{ matrix.python-version == '3.11' && ! startsWith(github.ref, 'refs/tags/v') }}
      with:
        path: dist
        name: streamlit-fesion-${{ github.sha }}.tgz

    - name: Upload the built files as an artifact (when pushed with a version tag)
      uses: actions/upload-artifact@v3
      if: ${{ matrix.python-version == '3.11' && startsWith(github.ref, 'refs/tags/v') }}
      with:
        path: dist
        name: streamlit-fesion-${{ github.ref_name }}.tgz

  test-frontend:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: streamlit_fesion/frontend

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version-file: streamlit_fesion/frontend/.nvmrc
        cache: 'yarn'
        cache-dependency-path: streamlit_fesion/frontend/yarn.lock
    - run: yarn install --frozen-lockfile
    - name: Lint
      run: |
        yarn run check:eslint
        yarn run check:prettier
    # - run: yarn test
    - run: yarn run build

  publish:
    if: ${{ !failure() && startsWith(github.ref, 'refs/tags/v') }}  # `!failure()` is necessary to avoid skipping this job after successful build: https://github.com/actions/runner/issues/491
    needs: [test-and-build, test-frontend]

    permissions:
      contents: write  # Necessary for creating releases: https://github.com/softprops/action-gh-release#permissions

    runs-on: ubuntu-latest

    env:
      python-version: "3.11.2"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}

      # Copied from https://github.com/python-poetry/poetry/blob/c71deb4b75b3672116b3199b2f9ab7e2bf520844/.github/workflows/main.yml#L46-L96
      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - uses: actions/download-artifact@v3
        with:
          name: streamlit-fesion-${{ github.ref_name }}.tgz
          path: dist

      - name: Publish
        run: poetry publish -u __token__ -p $PYPI_API_TOKEN
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Create a new release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
